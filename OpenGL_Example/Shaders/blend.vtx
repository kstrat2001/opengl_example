precision highp float;

attribute vec4 vtxPosition;
attribute vec4 vtxNormal;

uniform mat4 Projection;
uniform mat4 Modelview;
uniform mat4 NormalMat;

uniform vec4 ObjectColor;
uniform vec4 AmbientGlobal;
uniform vec3 LightPosition;

varying vec4 diffuse;
varying vec3 normal, halfVector, ecPos;

void main(void)
{
    // first transform the normal into eye space and normalize the result
    normal = normalize((NormalMat * vtxNormal).xyz);

    // compute the vertex position  in camera space.
    ecPos = (Modelview * vtxPosition).xyz;

    // calculate the halfVector to pass it to the fragment shader
    halfVector = LightPosition - (2.0 * ecPos).xyz;

    // Assume a white diffuse light
    diffuse = ObjectColor;

    gl_Position = Projection * vec4(ecPos, 1.0);
}